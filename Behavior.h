#ifndef BEHAVIOR_H
#define BEHAVIOR_H

#include <iostream>
#include <vector>


using namespace std;


enum Status // CADA COMPORTAMIENTO, CUANDO SE EJECUTA, DEVUELVE UN ESTADO QUE ES CRITICO PARA QUE EL EBHAVIOR TREE FUNCIONE
/**
 * 
 ** Devuelve los valores de los estados validos para los comportamientos
 */
{
	BH_INVALID,
    BH_SUCCESS, // COMPLETION STATUS --> INDICA QUE TODO HA IDO COMO SE ESPERABA ( LO DEVUELVEN LAS ACCIONES )
    BH_FAILURE, // COMPLETION STATUS --> INDICA QUE ALGO HA IDO MAL
    BH_RUNNING, // INDICACION DE EJECUCION --> INDICA QUE LA EJECUCION ESTA EN MARCHA 
	BH_ABORTED,
};

// CLASE ABSTRACTA BASE PARA ACCIONES, CONDICIONES Y COMPOSICIONES. QUE SE PUEDE ACTIVAR, EJECUTAR Y DESACTIVAR
class Behavior
{
	public:

		Behavior();
		virtual ~Behavior();
		Status tick();

		virtual Status update() = 0 ; 	    // EL IGUAL A 0 QUIERE DECIR QUE ESTE METODO NO TIENE IMPLEMENTACION EN ESTA CLASE (CLASE ABSTRACTA)
		virtual void onTerminate(Status);  // METODO VIRTUAL PARA QUE LAS SUBCLASES LO SOBREESCRIBA. TODAS LAS CLASES IMPLEMENTARAN UNA 
		virtual void onInitialize();

	private:
		Status m_eStatus;
};

#endif // BEHAVIOR_H